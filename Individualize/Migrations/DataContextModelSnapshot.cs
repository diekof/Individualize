// <auto-generated />
using System;
using Individualize.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IndividualizeWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Individualize.Models.AbastecimentoAgua", b =>
                {
                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("AbastecimentoAguaId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("AbastecimentoAguaData")
                        .HasColumnType("datetime");

                    b.Property<decimal>("AbastecimentoAguaQtd")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("AbastecimentoAguaValor")
                        .HasColumnType("money");

                    b.Property<decimal>("FornecedorId")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("CondominioId", "AbastecimentoAguaId")
                        .HasName("PK__Abasteci__94184405C7123D22");

                    b.HasIndex("FornecedorId")
                        .HasName("IABASTECIMENTOAGUA1");

                    b.ToTable("AbastecimentoAgua");
                });

            modelBuilder.Entity("Individualize.Models.Acao", b =>
                {
                    b.Property<short>("AcaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcaoDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AcaoId");

                    b.ToTable("Acao");
                });

            modelBuilder.Entity("Individualize.Models.AgendamentoVistoria", b =>
                {
                    b.Property<int>("AgendamentoVistCod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AgendamentoVistContato")
                        .HasColumnType("smallint");

                    b.Property<string>("AgendamentoVistContatoTexto")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("AgendamentoVistData")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AgendamentoVistDataResp")
                        .HasColumnType("datetime");

                    b.Property<string>("AgendamentoVistObs")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("AgendamentoVistProtocolo")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("AgendamentoVistResposta")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<short>("AgendamentoVistSituacao")
                        .HasColumnType("smallint");

                    b.Property<string>("AgendamentoVistTitulo")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("AlertaId")
                        .HasColumnType("smallint");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.HasKey("AgendamentoVistCod")
                        .HasName("PK__Agendame__5553F15D7884B149");

                    b.HasIndex("AlertaId")
                        .HasName("IAGENDAMENTOVISTORIA2");

                    b.HasIndex("UnidadeId")
                        .HasName("IAGENDAMENTOVISTORIA1");

                    b.ToTable("AgendamentoVistoria");
                });

            modelBuilder.Entity("Individualize.Models.AgendamentoVistoriaTram", b =>
                {
                    b.Property<int>("AgendamentoVistTramCod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgendamentoVistCod")
                        .HasColumnType("int");

                    b.Property<string>("AgendamentoVistTramAcao")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<DateTime>("AgendamentoVistTramData")
                        .HasColumnType("datetime");

                    b.Property<string>("AgendamentoVistTramTexto")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("AgendamentoVistTramUsuario")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AgendamentoVistTramCod")
                        .HasName("PK__Agendame__FB8CBCC88CF2B08F");

                    b.HasIndex("AgendamentoVistCod")
                        .HasName("IAGENDAMENTOVISTORIATRAM1");

                    b.ToTable("AgendamentoVistoriaTram");
                });

            modelBuilder.Entity("Individualize.Models.Alerta", b =>
                {
                    b.Property<short>("AlertaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlertaDataOcorrencia")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AlertaDataResolucao")
                        .HasColumnType("datetime");

                    b.Property<string>("AlertaObs")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("AlertaProvidenciaTomada")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AlertaSituacao")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AlertaTipo")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("FuncionarioId")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("AlertaId");

                    b.HasIndex("CondominioId")
                        .HasName("IALERTA1");

                    b.HasIndex("FuncionarioId")
                        .HasName("IALERTA2");

                    b.ToTable("Alerta");
                });

            modelBuilder.Entity("Individualize.Models.Bairro", b =>
                {
                    b.Property<int>("BairroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BairroDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.HasKey("BairroId");

                    b.HasIndex("CidadeId")
                        .HasName("IBAIRRO1");

                    b.ToTable("Bairro");
                });

            modelBuilder.Entity("Individualize.Models.Cidade", b =>
                {
                    b.Property<int>("CidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CidadeDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("EstadoId")
                        .HasColumnType("smallint");

                    b.HasKey("CidadeId");

                    b.HasIndex("EstadoId")
                        .HasName("ICIDADE1");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("Individualize.Models.Cliente", b =>
                {
                    b.Property<decimal>("ClienteId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("ClienteAltEm")
                        .HasColumnType("datetime");

                    b.Property<short?>("ClienteAltPor")
                        .HasColumnType("smallint");

                    b.Property<string>("ClienteCpf")
                        .HasColumnType("char(11)")
                        .IsFixedLength(true)
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<DateTime>("ClienteIncEm")
                        .HasColumnType("datetime");

                    b.Property<short>("ClienteIncPor")
                        .HasColumnType("smallint");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Individualize.Models.Condominio", b =>
                {
                    b.Property<short>("CondominioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CondominioAreaComumAgua")
                        .HasColumnType("decimal(15, 6)");

                    b.Property<string>("CondominioAreaComumAguaTipo")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<decimal?>("CondominioAreaComumGas")
                        .HasColumnType("decimal(15, 6)");

                    b.Property<string>("CondominioAreaComumGasTipo")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("CondominioBairroId")
                        .HasColumnType("int");

                    b.Property<string>("CondominioBolMensagemAgua")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CondominioBolMensagemRodape")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CondominioDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal>("CondominioFornecedorAguaId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("CondominioFornecedorGasId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("CondominioIdExport")
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<short>("CondominioTaxaEsgoto")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioUltimaAbstAguaId")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioUltimaAbstId")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioUltimaTorreId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("PrecoDataFim")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PrecoDataIni")
                        .HasColumnType("datetime");

                    b.Property<bool>("PrecoTaxaMinimaAgua")
                        .HasColumnType("bit");

                    b.Property<bool>("PrecoTaxaMinimaGas")
                        .HasColumnType("bit");

                    b.Property<short>("PrecoUltimoAguaId")
                        .HasColumnType("smallint");

                    b.Property<short>("PrecoUltimoGasId")
                        .HasColumnType("smallint");

                    b.HasKey("CondominioId");

                    b.HasIndex("CondominioBairroId")
                        .HasName("ICONDOMINIO3");

                    b.HasIndex("CondominioFornecedorAguaId")
                        .HasName("ICONDOMINIO1");

                    b.HasIndex("CondominioFornecedorGasId")
                        .HasName("ICONDOMINIO2");

                    b.ToTable("Condominio");
                });

            modelBuilder.Entity("Individualize.Models.CondominioAbastecimento", b =>
                {
                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioAbastecimentoId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CondominioAbastecimentoData")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CondominioAbastecimentoQtd")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("FornecedorId")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("CondominioId", "CondominioAbastecimentoId")
                        .HasName("PK__Condomin__4AE220F43D01079E");

                    b.HasIndex("FornecedorId")
                        .HasName("ICONDOMINIOABASTECIMENTO1");

                    b.ToTable("CondominioAbastecimento");
                });

            modelBuilder.Entity("Individualize.Models.CondominioPrecoAgua", b =>
                {
                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("PrecoAguaId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PrecoAguaQtd")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("PrecoAguaValor")
                        .HasColumnType("decimal(15, 6)");

                    b.HasKey("CondominioId", "PrecoAguaId")
                        .HasName("PK__Condomin__48358A7890F59999");

                    b.HasIndex("CondominioId", "PrecoAguaQtd")
                        .HasName("UCONDOMINIOPRECOAGUAQTD");

                    b.ToTable("CondominioPrecoAgua");
                });

            modelBuilder.Entity("Individualize.Models.CondominioPrecoGas", b =>
                {
                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("PrecoGasId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PrecoGasQtd")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("PrecoGasValor")
                        .HasColumnType("decimal(15, 6)");

                    b.HasKey("CondominioId", "PrecoGasId")
                        .HasName("PK__Condomin__A9346A4B143527C6");

                    b.HasIndex("CondominioId", "PrecoGasQtd")
                        .HasName("UCONDOMINIOPRECOGASQTD");

                    b.ToTable("CondominioPrecoGas");
                });

            modelBuilder.Entity("Individualize.Models.CondominioTorres", b =>
                {
                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioTorresId")
                        .HasColumnType("smallint");

                    b.Property<string>("CondominioTorresDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CondominioTorresIdExport")
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.HasKey("CondominioId", "CondominioTorresId")
                        .HasName("PK__Condomin__D0B2223EADEA75E1");

                    b.ToTable("CondominioTorres");
                });

            modelBuilder.Entity("Individualize.Models.Estado", b =>
                {
                    b.Property<short>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstadoDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EstadoSigla")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<short>("PaisId")
                        .HasColumnType("smallint");

                    b.HasKey("EstadoId");

                    b.HasIndex("PaisId")
                        .HasName("IESTADO1");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("Individualize.Models.Fornecedor", b =>
                {
                    b.Property<decimal>("FornecedorId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("FornecedorCnpj")
                        .HasColumnName("FornecedorCNPJ")
                        .HasColumnType("char(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<string>("FornecedorTipo")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("FornecedorId");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("Individualize.Models.Funcao", b =>
                {
                    b.Property<short>("FuncaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FuncaoDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("FuncaoId");

                    b.ToTable("Funcao");
                });

            modelBuilder.Entity("Individualize.Models.Funcionario", b =>
                {
                    b.Property<decimal>("FuncionarioId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<short>("FuncaoId")
                        .HasColumnType("smallint");

                    b.HasKey("FuncionarioId");

                    b.HasIndex("FuncaoId")
                        .HasName("IFUNCIONARIO2");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("Individualize.Models.LogAcesso", b =>
                {
                    b.Property<short>("LogAcessoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LogAcessoData")
                        .HasColumnType("datetime");

                    b.Property<decimal>("UsuarioId")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("LogAcessoId");

                    b.HasIndex("LogAcessoData")
                        .HasName("ULOGACESSODATA");

                    b.HasIndex("UsuarioId")
                        .HasName("ILOGACESSO1");

                    b.ToTable("LogAcesso");
                });

            modelBuilder.Entity("Individualize.Models.Measurings", b =>
                {
                    b.Property<short>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alarm")
                        .IsRequired()
                        .HasColumnName("alarm")
                        .HasColumnType("char(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("BatteryLifetime")
                        .HasColumnName("battery_lifetime")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnName("device")
                        .HasColumnType("char(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Measurer")
                        .IsRequired()
                        .HasColumnName("measurer")
                        .HasColumnType("char(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Measuring")
                        .HasColumnName("measuring")
                        .HasColumnType("int");

                    b.Property<short>("MeasuringType")
                        .HasColumnName("measuring_type")
                        .HasColumnType("smallint");

                    b.Property<short>("Medium")
                        .HasColumnName("medium")
                        .HasColumnType("smallint");

                    b.HasKey("Code")
                        .HasName("PK__measurin__357D4CF84611C6D9");

                    b.ToTable("measurings");
                });

            modelBuilder.Entity("Individualize.Models.Medicao", b =>
                {
                    b.Property<int>("MedicaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("CondominioAbastecimentoId")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioTorresId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("FuncionarioId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("MedicaoAreaComumGas")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("MedicaoCondominioAreaComumAgua")
                        .HasColumnType("decimal(15, 6)");

                    b.Property<decimal>("MedicaoCondominioAreaComumGas")
                        .HasColumnType("decimal(15, 6)");

                    b.Property<DateTime>("MedicaoData")
                        .HasColumnType("datetime");

                    b.Property<decimal>("MedicaoDensidadeInformada")
                        .HasColumnType("decimal(11, 5)");

                    b.Property<string>("MedicaoDensidadeTipo")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool>("MedicaoPrecoAguaTaxaMinima")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicaoPrecoGasTaxaMinima")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicaoPrecoTaxaMinimaAgua")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicaoPrecoTaxaMinimaGas")
                        .HasColumnType("bit");

                    b.Property<decimal>("MedicaoRegistroGeralAgua")
                        .HasColumnType("smallmoney");

                    b.Property<string>("MedicaoStatus")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<short>("MedicaoTaxaEsgotoPerc")
                        .HasColumnType("smallint");

                    b.Property<decimal>("MedicaoTotalAreaComumAgua")
                        .HasColumnType("decimal(15, 6)");

                    b.Property<decimal>("MedicaoTotalAreaComumGas")
                        .HasColumnType("decimal(15, 6)");

                    b.Property<DateTime>("MedicaoVencimento")
                        .HasColumnType("datetime");

                    b.HasKey("MedicaoId");

                    b.HasIndex("FuncionarioId")
                        .HasName("IMEDICAO1");

                    b.HasIndex("MedicaoData")
                        .HasName("UMEDICAODATA");

                    b.HasIndex("CondominioId", "CondominioAbastecimentoId")
                        .HasName("IMEDICAO3");

                    b.HasIndex("CondominioId", "CondominioTorresId")
                        .HasName("IMEDICAO2");

                    b.ToTable("Medicao");
                });

            modelBuilder.Entity("Individualize.Models.MedicaoItem", b =>
                {
                    b.Property<int>("MedicaoId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContaDataOcorrencia")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ContaPgtoEm")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ContaPgtoPor")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ContaStatus")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("MedicaoItemMsgBoleto")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MedicaoItemObs")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MedicaoItemRetorno")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal>("MedicaoItemTotalAgua")
                        .HasColumnType("decimal(15, 6)");

                    b.Property<decimal>("MedicaoItemTotalGas")
                        .HasColumnType("decimal(15, 6)");

                    b.HasKey("MedicaoId", "UnidadeId")
                        .HasName("PK__MedicaoI__AAF4BB3D55007DB3");

                    b.HasIndex("ContaPgtoPor")
                        .HasName("IMEDICAOITEM");

                    b.HasIndex("UnidadeId")
                        .HasName("IMEDICAOMEDICAOITEM1");

                    b.ToTable("MedicaoItem");
                });

            modelBuilder.Entity("Individualize.Models.MedicaoItemGasometro", b =>
                {
                    b.Property<int>("MedicaoId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<int>("GasometroId")
                        .HasColumnType("int");

                    b.Property<decimal>("MedicaoItemGasGasometro")
                        .HasColumnType("smallmoney");

                    b.HasKey("MedicaoId", "UnidadeId", "GasometroId")
                        .HasName("PK__MedicaoI__EA52B41D628AC2AB");

                    b.HasIndex("UnidadeId", "GasometroId")
                        .HasName("IMEDICAOITEMGASOMETRO1");

                    b.ToTable("MedicaoItemGasometro");
                });

            modelBuilder.Entity("Individualize.Models.MedicaoItemHidrometro", b =>
                {
                    b.Property<int>("MedicaoId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<int>("HidrometroId")
                        .HasColumnType("int");

                    b.Property<decimal>("MedicaoItemAguaHidrometro")
                        .HasColumnType("smallmoney");

                    b.HasKey("MedicaoId", "UnidadeId", "HidrometroId")
                        .HasName("PK__MedicaoI__B17F7434E80B9AB9");

                    b.HasIndex("UnidadeId", "HidrometroId")
                        .HasName("IMEDICAOITEMHIDROMETRO1");

                    b.ToTable("MedicaoItemHidrometro");
                });

            modelBuilder.Entity("Individualize.Models.MedicaoPrecoAgua", b =>
                {
                    b.Property<int>("MedicaoId")
                        .HasColumnType("int");

                    b.Property<short>("MedicaoPrecoAguaId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("MedicaoPrecoAguaQtd")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("MedicaoPrecoAguaValor")
                        .HasColumnType("decimal(15, 6)");

                    b.HasKey("MedicaoId", "MedicaoPrecoAguaId")
                        .HasName("PK__MedicaoP__262D37E1C626B19B");

                    b.ToTable("MedicaoPrecoAgua");
                });

            modelBuilder.Entity("Individualize.Models.MedicaoPrecoGas", b =>
                {
                    b.Property<int>("MedicaoId")
                        .HasColumnType("int");

                    b.Property<short>("MedicaoPrecoGasId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("MedicaoPrecoGasQtd")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("MedicaoPrecoGasValor")
                        .HasColumnType("decimal(15, 6)");

                    b.HasKey("MedicaoId", "MedicaoPrecoGasId")
                        .HasName("PK__MedicaoP__2CBFEC45C7B9A606");

                    b.ToTable("MedicaoPrecoGas");
                });

            modelBuilder.Entity("Individualize.Models.Modulo", b =>
                {
                    b.Property<short>("ModuloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModuloDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("ModuloImg")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ModuloImgNome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ModuloImgTipo")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("ModuloId");

                    b.ToTable("Modulo");
                });

            modelBuilder.Entity("Individualize.Models.Noticia", b =>
                {
                    b.Property<short>("NoticiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("NoticiaData")
                        .HasColumnType("datetime");

                    b.Property<string>("NoticiaDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("NoticiaImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NoticiaImgNome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NoticiaImgTipo")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("NoticiaResumo")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("NoticiaTexto")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("NoticiaId");

                    b.ToTable("Noticia");
                });

            modelBuilder.Entity("Individualize.Models.Notificacao", b =>
                {
                    b.Property<short>("NotificacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<string>("NotificacaoAssunto")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NotificacaoCorpo")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<DateTime>("NotificacaoDataElaboracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NotificacaoDataProtocolo")
                        .HasColumnType("datetime");

                    b.HasKey("NotificacaoId");

                    b.HasIndex("CondominioId")
                        .HasName("INOTIFICACAO1");

                    b.ToTable("Notificacao");
                });

            modelBuilder.Entity("Individualize.Models.Objeto", b =>
                {
                    b.Property<short>("ObjetoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("ModuloId")
                        .HasColumnType("smallint");

                    b.Property<string>("ObjetoDsc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("ObjetoMenuLink")
                        .HasColumnType("bit");

                    b.Property<string>("ObjetoNome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("ObjetoPaiId")
                        .HasColumnType("smallint");

                    b.HasKey("ObjetoId");

                    b.HasIndex("ModuloId")
                        .HasName("IOBJETO1");

                    b.HasIndex("ObjetoNome")
                        .IsUnique()
                        .HasName("UOBJETONOME");

                    b.HasIndex("ObjetoPaiId")
                        .HasName("IOBJETO2");

                    b.ToTable("Objeto");
                });

            modelBuilder.Entity("Individualize.Models.ObjetoAcao", b =>
                {
                    b.Property<short>("ObjetoId")
                        .HasColumnType("smallint");

                    b.Property<short>("AcaoId")
                        .HasColumnType("smallint");

                    b.HasKey("ObjetoId", "AcaoId")
                        .HasName("PK__ObjetoAc__CC6242DB99CADCF0");

                    b.HasIndex("AcaoId")
                        .HasName("IOBJETOACAO1");

                    b.ToTable("ObjetoAcao");
                });

            modelBuilder.Entity("Individualize.Models.Pais", b =>
                {
                    b.Property<short>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaisDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PaisId");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("Individualize.Models.ParSis", b =>
                {
                    b.Property<short>("ParSisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParSisBoletoFraseGeral")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<short>("ParSisBoletoQtdDiasVencimento")
                        .HasColumnType("smallint");

                    b.Property<short>("ParSisBoletoQtdHistoricoGrafic")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ParSisConsumoExageradoAgua")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("ParSisConsumoExageradoGas")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("ParSisConsumoInsignificanteAgu")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("ParSisConsumoInsignificanteGas")
                        .HasColumnType("smallmoney");

                    b.Property<DateTime?>("ParSisDataFim")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ParSisDataIni")
                        .HasColumnType("datetime");

                    b.Property<string>("ParSisEmpCnpj")
                        .IsRequired()
                        .HasColumnName("ParSisEmpCNPJ")
                        .HasColumnType("char(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<string>("ParSisEmpEmail")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ParSisEmpEnd1")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("ParSisEmpEnd2")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("ParSisEmpEnd3")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<decimal?>("ParSisEmpFone")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<string>("ParSisEmpNome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ParSisEmpSite")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<short>("ParSisUsuarioDefSenhaSize")
                        .HasColumnType("smallint");

                    b.Property<short>("ParSisUsuarioDefSenhaTipoCap")
                        .HasColumnType("smallint");

                    b.Property<short>("ParSisUsuarioDefSenhaTipoStr")
                        .HasColumnType("smallint");

                    b.Property<string>("ParSisUsuarioTermoUtilizacao")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("ParSisId");

                    b.ToTable("ParSis");
                });

            modelBuilder.Entity("Individualize.Models.Patrimonio", b =>
                {
                    b.Property<short>("PatrimonioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PatrimonioDataAquisicao")
                        .HasColumnType("datetime");

                    b.Property<string>("PatrimonioDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PatrimonioEstadoConservacao")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("PatrimonioNum")
                        .HasColumnType("smallint");

                    b.Property<short>("PatrimonioQtd")
                        .HasColumnType("smallint");

                    b.Property<string>("PatrimonioUnidadeMedida")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<decimal>("PatrimonioValorUnitario")
                        .HasColumnType("money");

                    b.HasKey("PatrimonioId");

                    b.ToTable("Patrimonio");
                });

            modelBuilder.Entity("Individualize.Models.Perfil", b =>
                {
                    b.Property<short>("PerfilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PerfilDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PerfilTipoUnidades")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("PerfilId");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Individualize.Models.PerfilMenu", b =>
                {
                    b.Property<short>("PerfilId")
                        .HasColumnType("smallint");

                    b.Property<short>("ModuloId")
                        .HasColumnType("smallint");

                    b.Property<string>("PerfilMenu1")
                        .IsRequired()
                        .HasColumnName("PerfilMenu")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.HasKey("PerfilId", "ModuloId")
                        .HasName("PK__PerfilMe__EE6CB0887BC695E5");

                    b.HasIndex("ModuloId")
                        .HasName("IPERFILMENU1");

                    b.ToTable("PerfilMenu");
                });

            modelBuilder.Entity("Individualize.Models.PerfilObjeto", b =>
                {
                    b.Property<short>("PerfilId")
                        .HasColumnType("smallint");

                    b.Property<short>("ObjetoId")
                        .HasColumnType("smallint");

                    b.Property<bool>("PerfilAcessoDel")
                        .HasColumnName("PerfilAcessoDEL")
                        .HasColumnType("bit");

                    b.Property<bool>("PerfilAcessoImp")
                        .HasColumnName("PerfilAcessoIMP")
                        .HasColumnType("bit");

                    b.Property<bool>("PerfilAcessoIns")
                        .HasColumnName("PerfilAcessoINS")
                        .HasColumnType("bit");

                    b.Property<bool>("PerfilAcessoUpd")
                        .HasColumnName("PerfilAcessoUPD")
                        .HasColumnType("bit");

                    b.HasKey("PerfilId", "ObjetoId")
                        .HasName("PK__PerfilOb__8CFB23DDC892729C");

                    b.HasIndex("ObjetoId")
                        .HasName("IPERFILOBJETO");

                    b.ToTable("PerfilObjeto");
                });

            modelBuilder.Entity("Individualize.Models.PerfilObjetoAcoes", b =>
                {
                    b.Property<short>("PerfilId")
                        .HasColumnType("smallint");

                    b.Property<short>("ObjetoId")
                        .HasColumnType("smallint");

                    b.Property<short>("AcaoId")
                        .HasColumnType("smallint");

                    b.Property<bool>("PerfilAcessoAcao")
                        .HasColumnType("bit");

                    b.HasKey("PerfilId", "ObjetoId", "AcaoId")
                        .HasName("PK__PerfilOb__A0C67F2B1E7E8C16");

                    b.HasIndex("ObjetoId", "AcaoId")
                        .HasName("IPERFILOBJETOACOES1");

                    b.ToTable("PerfilObjetoAcoes");
                });

            modelBuilder.Entity("Individualize.Models.PerfilUnidades", b =>
                {
                    b.Property<short>("PerfilId")
                        .HasColumnType("smallint");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.HasKey("PerfilId", "UnidadeId")
                        .HasName("PK__PerfilUn__8AEE09BDFDDBA307");

                    b.HasIndex("UnidadeId")
                        .HasName("IPERFILPERFILUNIDADES1");

                    b.ToTable("PerfilUnidades");
                });

            modelBuilder.Entity("Individualize.Models.Pessoa", b =>
                {
                    b.Property<decimal>("PessoaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BairroId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PessoaAltEm")
                        .HasColumnType("datetime");

                    b.Property<short?>("PessoaAltPor")
                        .HasColumnType("smallint");

                    b.Property<string>("PessoaEmail")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PessoaEnderecoCep")
                        .HasColumnType("int");

                    b.Property<string>("PessoaEnderecoNum")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PessoaEnderecoRua")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal?>("PessoaFoneCel")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<decimal?>("PessoaFoneCom")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<decimal?>("PessoaFoneRes")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime>("PessoaIncEm")
                        .HasColumnType("datetime");

                    b.Property<short>("PessoaIncPor")
                        .HasColumnType("smallint");

                    b.Property<string>("PessoaNome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PessoaSexo")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<short?>("UltimoDependenteId")
                        .HasColumnType("smallint");

                    b.HasKey("PessoaId");

                    b.HasIndex("BairroId")
                        .HasName("IPESSOA1");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Individualize.Models.PessoaDependente", b =>
                {
                    b.Property<decimal>("PessoaId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<short>("DependenteId")
                        .HasColumnType("smallint");

                    b.Property<short?>("DependenteIdade")
                        .HasColumnType("smallint");

                    b.Property<string>("DependenteSexo")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("PessoaId", "DependenteId")
                        .HasName("PK__PessoaDe__7B4883DB22461C35");

                    b.ToTable("PessoaDependente");
                });

            modelBuilder.Entity("Individualize.Models.QuestSocial", b =>
                {
                    b.Property<short>("QuestSocialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestSocialDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("QuestSocialOutrosDsc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("QuestSocialOutrosFlag")
                        .HasColumnType("bit");

                    b.Property<string>("QuestSocialQtdUnidade")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("QuestSocialTipoResposta")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<short>("QuestSocialUltAlternativaId")
                        .HasColumnType("smallint");

                    b.HasKey("QuestSocialId");

                    b.ToTable("QuestSocial");
                });

            modelBuilder.Entity("Individualize.Models.QuestSocialAlternativa", b =>
                {
                    b.Property<short>("QuestSocialId")
                        .HasColumnType("smallint");

                    b.Property<short>("QuestSocialAlternativaId")
                        .HasColumnType("smallint");

                    b.Property<string>("QuestSocialAlternativaDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("QuestSocialId", "QuestSocialAlternativaId")
                        .HasName("PK__QuestSoc__BB53C7B76F626EB8");

                    b.ToTable("QuestSocialAlternativa");
                });

            modelBuilder.Entity("Individualize.Models.QuestSocialCondominio", b =>
                {
                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("QuestSocialId")
                        .HasColumnType("smallint");

                    b.Property<bool>("QuestSocialCondominioObr")
                        .HasColumnType("bit");

                    b.Property<short>("QuestSocialCondominioOrdem")
                        .HasColumnType("smallint");

                    b.HasKey("CondominioId", "QuestSocialId")
                        .HasName("PK__QuestSoc__840477BDEBE185D1");

                    b.HasIndex("QuestSocialId")
                        .HasName("IQUESTSOCIALCONDOMINIO1");

                    b.ToTable("QuestSocialCondominio");
                });

            modelBuilder.Entity("Individualize.Models.QuestSocialPessoa", b =>
                {
                    b.Property<decimal>("PessoaId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<short>("QuestSocialId")
                        .HasColumnType("smallint");

                    b.Property<short?>("QuestSocialAlternativaId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("QuestSocialPessoaData")
                        .HasColumnType("datetime");

                    b.Property<string>("QuestSocialPessoaRespostaDsc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PessoaId", "QuestSocialId")
                        .HasName("PK__QuestSoc__0CEBDC19FF04A72D");

                    b.HasIndex("QuestSocialId", "QuestSocialAlternativaId")
                        .HasName("IQUESTSOCIALPESSOA1");

                    b.ToTable("QuestSocialPessoa");
                });

            modelBuilder.Entity("Individualize.Models.Unidade", b =>
                {
                    b.Property<int>("UnidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ClienteId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<short>("CondominioId")
                        .HasColumnType("smallint");

                    b.Property<short>("CondominioTorresId")
                        .HasColumnType("smallint");

                    b.Property<string>("UnidadeDsc")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UnidadeIdExport")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<bool?>("UnidadeInformativoDigital")
                        .HasColumnType("bit");

                    b.Property<int>("UnidadeUltimoGasometroId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadeUltimoHidrometroId")
                        .HasColumnType("int");

                    b.HasKey("UnidadeId");

                    b.HasIndex("ClienteId")
                        .HasName("IUNIDADE4");

                    b.HasIndex("CondominioId", "CondominioTorresId")
                        .HasName("IUNIDADE1");

                    b.ToTable("Unidade");
                });

            modelBuilder.Entity("Individualize.Models.UnidadeGasometro", b =>
                {
                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<int>("GasometroId")
                        .HasColumnType("int");

                    b.Property<string>("GasometroDevice")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GasometroMeasurer")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GasometroStatus")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<short>("GasometroTipoMedicao")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("GasometroValorInicial")
                        .HasColumnType("smallmoney");

                    b.HasKey("UnidadeId", "GasometroId")
                        .HasName("PK__UnidadeG__6485D9BDD13B1A71");

                    b.ToTable("UnidadeGasometro");
                });

            modelBuilder.Entity("Individualize.Models.UnidadeHidrometro", b =>
                {
                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<int>("HidrometroId")
                        .HasColumnType("int");

                    b.Property<string>("HidrometroDevice")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("HidrometroMeasurer")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("HidrometroStatus")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<short>("HidrometroTipoMedicao")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("HidrometroValorInicial")
                        .HasColumnType("smallmoney");

                    b.HasKey("UnidadeId", "HidrometroId")
                        .HasName("PK__UnidadeH__D659DB28A62077AA");

                    b.ToTable("UnidadeHidrometro");
                });

            modelBuilder.Entity("Individualize.Models.Usuario", b =>
                {
                    b.Property<decimal>("UsuarioId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<short>("PerfilId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UsuarioAltEm")
                        .HasColumnType("datetime");

                    b.Property<short?>("UsuarioAltPor")
                        .HasColumnType("smallint");

                    b.Property<string>("UsuarioChave")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("UsuarioCodAtivacao")
                        .IsRequired()
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("UsuarioIncEm")
                        .HasColumnType("datetime");

                    b.Property<short>("UsuarioIncPor")
                        .HasColumnType("smallint");

                    b.Property<string>("UsuarioLogin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("UsuarioSenha")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<short>("UsuarioSituacao")
                        .HasColumnType("smallint");

                    b.HasKey("UsuarioId");

                    b.HasIndex("PerfilId")
                        .HasName("IUSUARIO2");

                    b.HasIndex("UsuarioLogin")
                        .IsUnique()
                        .HasName("UUSUARIOLOGIN");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Individualize.Models.AbastecimentoAgua", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("AbastecimentoAgua")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("IABASTECIMENTOAGUA2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Fornecedor", "Fornecedor")
                        .WithMany("AbastecimentoAgua")
                        .HasForeignKey("FornecedorId")
                        .HasConstraintName("IABASTECIMENTOAGUA1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.AgendamentoVistoria", b =>
                {
                    b.HasOne("Individualize.Models.Alerta", "Alerta")
                        .WithMany("AgendamentoVistoria")
                        .HasForeignKey("AlertaId")
                        .HasConstraintName("IAGENDAMENTOVISTORIA2");

                    b.HasOne("Individualize.Models.Unidade", "Unidade")
                        .WithMany("AgendamentoVistoria")
                        .HasForeignKey("UnidadeId")
                        .HasConstraintName("IAGENDAMENTOVISTORIA1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.AgendamentoVistoriaTram", b =>
                {
                    b.HasOne("Individualize.Models.AgendamentoVistoria", "AgendamentoVistCodNavigation")
                        .WithMany("AgendamentoVistoriaTram")
                        .HasForeignKey("AgendamentoVistCod")
                        .HasConstraintName("IAGENDAMENTOVISTORIATRAM1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Alerta", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("Alerta")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("IALERTA1")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Funcionario", "Funcionario")
                        .WithMany("Alerta")
                        .HasForeignKey("FuncionarioId")
                        .HasConstraintName("IALERTA2");
                });

            modelBuilder.Entity("Individualize.Models.Bairro", b =>
                {
                    b.HasOne("Individualize.Models.Cidade", "Cidade")
                        .WithMany("Bairro")
                        .HasForeignKey("CidadeId")
                        .HasConstraintName("IBAIRRO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Cidade", b =>
                {
                    b.HasOne("Individualize.Models.Estado", "Estado")
                        .WithMany("Cidade")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("ICIDADE1");
                });

            modelBuilder.Entity("Individualize.Models.Cliente", b =>
                {
                    b.HasOne("Individualize.Models.Pessoa", "ClienteNavigation")
                        .WithOne("Cliente")
                        .HasForeignKey("Individualize.Models.Cliente", "ClienteId")
                        .HasConstraintName("ICLIENTE")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Condominio", b =>
                {
                    b.HasOne("Individualize.Models.Bairro", "CondominioBairro")
                        .WithMany("Condominio")
                        .HasForeignKey("CondominioBairroId")
                        .HasConstraintName("ICONDOMINIO3")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Fornecedor", "CondominioFornecedorAgua")
                        .WithMany("CondominioCondominioFornecedorAgua")
                        .HasForeignKey("CondominioFornecedorAguaId")
                        .HasConstraintName("ICONDOMINIO1")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Fornecedor", "CondominioFornecedorGas")
                        .WithMany("CondominioCondominioFornecedorGas")
                        .HasForeignKey("CondominioFornecedorGasId")
                        .HasConstraintName("ICONDOMINIO2")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.CondominioAbastecimento", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("CondominioAbastecimento")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("ICONDOMINIOABASTECIMENTO2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Fornecedor", "Fornecedor")
                        .WithMany("CondominioAbastecimento")
                        .HasForeignKey("FornecedorId")
                        .HasConstraintName("ICONDOMINIOABASTECIMENTO1");
                });

            modelBuilder.Entity("Individualize.Models.CondominioPrecoAgua", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("CondominioPrecoAgua")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("ICONDOMINIOPRECOAGUA1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.CondominioPrecoGas", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("CondominioPrecoGas")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("ICONDOMINIOPRECOGAS1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.CondominioTorres", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("CondominioTorres")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("ICONDOMINIOTORRES1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Estado", b =>
                {
                    b.HasOne("Individualize.Models.Pais", "Pais")
                        .WithMany("Estado")
                        .HasForeignKey("PaisId")
                        .HasConstraintName("IESTADO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Fornecedor", b =>
                {
                    b.HasOne("Individualize.Models.Pessoa", "FornecedorNavigation")
                        .WithOne("Fornecedor")
                        .HasForeignKey("Individualize.Models.Fornecedor", "FornecedorId")
                        .HasConstraintName("IFORNECEDOR")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Funcionario", b =>
                {
                    b.HasOne("Individualize.Models.Funcao", "Funcao")
                        .WithMany("Funcionario")
                        .HasForeignKey("FuncaoId")
                        .HasConstraintName("IFUNCIONARIO2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Pessoa", "FuncionarioNavigation")
                        .WithOne("Funcionario")
                        .HasForeignKey("Individualize.Models.Funcionario", "FuncionarioId")
                        .HasConstraintName("IFUNCIONARIO")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.LogAcesso", b =>
                {
                    b.HasOne("Individualize.Models.Usuario", "Usuario")
                        .WithMany("LogAcesso")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("ILOGACESSO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Medicao", b =>
                {
                    b.HasOne("Individualize.Models.Funcionario", "Funcionario")
                        .WithMany("Medicao")
                        .HasForeignKey("FuncionarioId")
                        .HasConstraintName("IMEDICAO1")
                        .IsRequired();

                    b.HasOne("Individualize.Models.CondominioAbastecimento", "Condominio")
                        .WithMany("Medicao")
                        .HasForeignKey("CondominioId", "CondominioAbastecimentoId")
                        .HasConstraintName("IMEDICAO3");

                    b.HasOne("Individualize.Models.CondominioTorres", "CondominioNavigation")
                        .WithMany("Medicao")
                        .HasForeignKey("CondominioId", "CondominioTorresId")
                        .HasConstraintName("IMEDICAO2")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.MedicaoItem", b =>
                {
                    b.HasOne("Individualize.Models.Usuario", "ContaPgtoPorNavigation")
                        .WithMany("MedicaoItem")
                        .HasForeignKey("ContaPgtoPor")
                        .HasConstraintName("IMEDICAOITEM")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Medicao", "Medicao")
                        .WithMany("MedicaoItem")
                        .HasForeignKey("MedicaoId")
                        .HasConstraintName("IMEDICAOMEDICAOITEM2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Unidade", "Unidade")
                        .WithMany("MedicaoItem")
                        .HasForeignKey("UnidadeId")
                        .HasConstraintName("IMEDICAOMEDICAOITEM1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.MedicaoItemGasometro", b =>
                {
                    b.HasOne("Individualize.Models.MedicaoItem", "MedicaoItem")
                        .WithMany("MedicaoItemGasometro")
                        .HasForeignKey("MedicaoId", "UnidadeId")
                        .HasConstraintName("IMEDICAOITEMGASOMETRO2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.UnidadeGasometro", "UnidadeGasometro")
                        .WithMany("MedicaoItemGasometro")
                        .HasForeignKey("UnidadeId", "GasometroId")
                        .HasConstraintName("IMEDICAOITEMGASOMETRO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.MedicaoItemHidrometro", b =>
                {
                    b.HasOne("Individualize.Models.MedicaoItem", "MedicaoItem")
                        .WithMany("MedicaoItemHidrometro")
                        .HasForeignKey("MedicaoId", "UnidadeId")
                        .HasConstraintName("IMEDICAOITEMHIDROMETRO2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.UnidadeHidrometro", "UnidadeHidrometro")
                        .WithMany("MedicaoItemHidrometro")
                        .HasForeignKey("UnidadeId", "HidrometroId")
                        .HasConstraintName("IMEDICAOITEMHIDROMETRO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.MedicaoPrecoAgua", b =>
                {
                    b.HasOne("Individualize.Models.Medicao", "Medicao")
                        .WithMany("MedicaoPrecoAgua")
                        .HasForeignKey("MedicaoId")
                        .HasConstraintName("IMEDICAOPRECOAGUA1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.MedicaoPrecoGas", b =>
                {
                    b.HasOne("Individualize.Models.Medicao", "Medicao")
                        .WithMany("MedicaoPrecoGas")
                        .HasForeignKey("MedicaoId")
                        .HasConstraintName("IMEDICAOPRECOGAS1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Notificacao", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("Notificacao")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("INOTIFICACAO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Objeto", b =>
                {
                    b.HasOne("Individualize.Models.Modulo", "Modulo")
                        .WithMany("Objeto")
                        .HasForeignKey("ModuloId")
                        .HasConstraintName("IOBJETO1");

                    b.HasOne("Individualize.Models.Objeto", "ObjetoPai")
                        .WithMany("InverseObjetoPai")
                        .HasForeignKey("ObjetoPaiId")
                        .HasConstraintName("IOBJETO2");
                });

            modelBuilder.Entity("Individualize.Models.ObjetoAcao", b =>
                {
                    b.HasOne("Individualize.Models.Acao", "Acao")
                        .WithMany("ObjetoAcao")
                        .HasForeignKey("AcaoId")
                        .HasConstraintName("IOBJETOACAO1")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Objeto", "Objeto")
                        .WithMany("ObjetoAcao")
                        .HasForeignKey("ObjetoId")
                        .HasConstraintName("IOBJETOACAO2")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.PerfilMenu", b =>
                {
                    b.HasOne("Individualize.Models.Modulo", "Modulo")
                        .WithMany("PerfilMenu")
                        .HasForeignKey("ModuloId")
                        .HasConstraintName("IPERFILMENU1")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Perfil", "Perfil")
                        .WithMany("PerfilMenu")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("IPERFILMENU2")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.PerfilObjeto", b =>
                {
                    b.HasOne("Individualize.Models.Objeto", "Objeto")
                        .WithMany("PerfilObjeto")
                        .HasForeignKey("ObjetoId")
                        .HasConstraintName("IPERFILOBJETO")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Perfil", "Perfil")
                        .WithMany("PerfilObjeto")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("IPERFILPERFILOBJETO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.PerfilObjetoAcoes", b =>
                {
                    b.HasOne("Individualize.Models.ObjetoAcao", "ObjetoAcao")
                        .WithMany("PerfilObjetoAcoes")
                        .HasForeignKey("ObjetoId", "AcaoId")
                        .HasConstraintName("IPERFILOBJETOACOES1")
                        .IsRequired();

                    b.HasOne("Individualize.Models.PerfilObjeto", "PerfilObjeto")
                        .WithMany("PerfilObjetoAcoes")
                        .HasForeignKey("PerfilId", "ObjetoId")
                        .HasConstraintName("IPERFILOBJETOACOES2")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.PerfilUnidades", b =>
                {
                    b.HasOne("Individualize.Models.Perfil", "Perfil")
                        .WithMany("PerfilUnidades")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("IPERFILPERFILUNIDADES2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Unidade", "Unidade")
                        .WithMany("PerfilUnidades")
                        .HasForeignKey("UnidadeId")
                        .HasConstraintName("IPERFILPERFILUNIDADES1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Pessoa", b =>
                {
                    b.HasOne("Individualize.Models.Bairro", "Bairro")
                        .WithMany("Pessoa")
                        .HasForeignKey("BairroId")
                        .HasConstraintName("IPESSOA1");
                });

            modelBuilder.Entity("Individualize.Models.PessoaDependente", b =>
                {
                    b.HasOne("Individualize.Models.Pessoa", "Pessoa")
                        .WithMany("PessoaDependente")
                        .HasForeignKey("PessoaId")
                        .HasConstraintName("IPESSOADEPENDENTE1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.QuestSocialAlternativa", b =>
                {
                    b.HasOne("Individualize.Models.QuestSocial", "QuestSocial")
                        .WithMany("QuestSocialAlternativa")
                        .HasForeignKey("QuestSocialId")
                        .HasConstraintName("IQUESTSOCIALQUESTSOCIALALTERN1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.QuestSocialCondominio", b =>
                {
                    b.HasOne("Individualize.Models.Condominio", "Condominio")
                        .WithMany("QuestSocialCondominio")
                        .HasForeignKey("CondominioId")
                        .HasConstraintName("IQUESTSOCIALCONDOMINIO2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.QuestSocial", "QuestSocial")
                        .WithMany("QuestSocialCondominio")
                        .HasForeignKey("QuestSocialId")
                        .HasConstraintName("IQUESTSOCIALCONDOMINIO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.QuestSocialPessoa", b =>
                {
                    b.HasOne("Individualize.Models.Pessoa", "Pessoa")
                        .WithMany("QuestSocialPessoa")
                        .HasForeignKey("PessoaId")
                        .HasConstraintName("IQUESTSOCIALPESSOA2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.QuestSocial", "QuestSocial")
                        .WithMany("QuestSocialPessoa")
                        .HasForeignKey("QuestSocialId")
                        .HasConstraintName("GX_001H006V")
                        .IsRequired();

                    b.HasOne("Individualize.Models.QuestSocialAlternativa", "QuestSocialNavigation")
                        .WithMany("QuestSocialPessoa")
                        .HasForeignKey("QuestSocialId", "QuestSocialAlternativaId")
                        .HasConstraintName("IQUESTSOCIALPESSOA1");
                });

            modelBuilder.Entity("Individualize.Models.Unidade", b =>
                {
                    b.HasOne("Individualize.Models.Cliente", "Cliente")
                        .WithMany("Unidade")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("IUNIDADE4");

                    b.HasOne("Individualize.Models.CondominioTorres", "Condominio")
                        .WithMany("Unidade")
                        .HasForeignKey("CondominioId", "CondominioTorresId")
                        .HasConstraintName("IUNIDADE1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.UnidadeGasometro", b =>
                {
                    b.HasOne("Individualize.Models.Unidade", "Unidade")
                        .WithMany("UnidadeGasometro")
                        .HasForeignKey("UnidadeId")
                        .HasConstraintName("IUNIDADEGASOMETRO2")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.UnidadeHidrometro", b =>
                {
                    b.HasOne("Individualize.Models.Unidade", "Unidade")
                        .WithMany("UnidadeHidrometro")
                        .HasForeignKey("UnidadeId")
                        .HasConstraintName("IUNIDADEHIDROMETRO1")
                        .IsRequired();
                });

            modelBuilder.Entity("Individualize.Models.Usuario", b =>
                {
                    b.HasOne("Individualize.Models.Perfil", "Perfil")
                        .WithMany("Usuario")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("IUSUARIO2")
                        .IsRequired();

                    b.HasOne("Individualize.Models.Pessoa", "UsuarioNavigation")
                        .WithOne("Usuario")
                        .HasForeignKey("Individualize.Models.Usuario", "UsuarioId")
                        .HasConstraintName("IUSUARIO")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
